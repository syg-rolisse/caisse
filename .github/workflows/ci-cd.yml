# Nom du pipeline CI/CD
name: Caisse CI/CD Pipeline

# D√©clencheurs du workflow
on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  # ===================================================================
  #  JOB 1: Tester la construction et le lancement des conteneurs
  # ===================================================================
  # Ce job s'ex√©cute sur chaque push et pull request vers 'develop'.
  # Son but est de s'assurer que l'application est fonctionnelle
  # AVANT de penser au d√©ploiement.
  # ===================================================================
  test-and-build:
    name: üß™ Tester l'application avec Docker
    runs-on: ubuntu-latest # L'environnement d'ex√©cution de GitHub

    steps:
      # 1. R√©cup√©rer le code source du d√©p√¥t
      - name: Checkout du code
        uses: actions/checkout@v4

      # 2. Cr√©er les fichiers .env n√©cessaires pour les tests
      - name: Cr√©er les fichiers .env pour l'environnement de test
        run: |
          # Fichier .env pour le backend (apis)
          cat <<EOF > ./apis/.env
          ${{ secrets.APIS_ENV_TZ }}
          ${{ secrets.APIS_ENV_PORT }}
          ${{ secrets.APIS_ENV_HOST }}
          ${{ secrets.APIS_ENV_LOG_LEVEL }}
          ${{ secrets.APIS_ENV_APP_KEY }}
          ${{ secrets.APIS_ENV_NODE_ENV }}
          ${{ secrets.APIS_ENV_DB_HOST }}
          ${{ secrets.APIS_ENV_DB_PORT }}
          ${{ secrets.APIS_ENV_DB_USER }}
          ${{ secrets.APIS_ENV_DB_PASSWORD }}
          ${{ secrets.APIS_ENV_DB_DATABASE }}
          ${{ secrets.APIS_ENV_SMTP_HOST }}
          ${{ secrets.APIS_ENV_SMTP_PORT }}
          ${{ secrets.APIS_ENV_SMTP_USERNAME }}
          ${{ secrets.APIS_ENV_SMTP_PASSWORD }}
          ${{ secrets.APIS_ENV_CACHE_VIEWS }}
          ${{ secrets.APIS_ENV_VITE_FRONT_URL }}
          EOF

          # Fichier .env.db pour la base de donn√©es
          cat <<EOF > ./apis/.env.db
          ${{ secrets.POSTGRES_USER }}
          ${{ secrets.POSTGRES_PASSWORD }}
          ${{ secrets.POSTGRES_DB }}
          EOF

          # Fichier .env pour le frontend (apps)
          cat <<EOF > ./apps/.env
          ${{ secrets.APP_ENV }}
          EOF
          
          echo "Fichiers .env pour le test cr√©√©s avec succ√®s."

      # 3. Lancer les conteneurs avec Docker Compose
      # Pas besoin d'installer Docker, il est d√©j√† disponible sur le runner.
      - name: Lancer Docker Compose
        run: docker-compose up --build -d

      # 4. V√©rifier que tous les conteneurs sont bien d√©marr√©s
      - name: V√©rifier l'√©tat des conteneurs
        run: |
          echo "Attente de 15 secondes pour la stabilisation des conteneurs..."
          sleep 15
          echo "V√©rification des conteneurs en cours :"
          docker-compose ps
          # Cette commande √©chouera si un conteneur n'est pas 'Up' ou 'running'
          if [ $(docker-compose ps | grep -c "Up") -lt $(docker-compose ps -q | wc -l) ]; then
            echo "Erreur : Un ou plusieurs conteneurs ne sont pas d√©marr√©s correctement."
            exit 1
          fi
          echo "Tous les conteneurs sont d√©marr√©s avec succ√®s."

  # ===================================================================
  #  JOB 2: D√©ployer l'application sur le serveur de production
  # ===================================================================
  # Ce job d√©pend du succ√®s du job 'test-and-build'.
  # Il ne s'ex√©cute QUE sur un push vers la branche 'develop'.
  # ===================================================================
  deploy:
    name: üöÄ D√©ployer sur le serveur
    needs: test-and-build # D√©pend du job de test
    runs-on: ubuntu-latest
    # Condition : ne s'ex√©cute que lors d'un push sur la branche 'develop'
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'

    steps:
      # 1. R√©cup√©rer le code source du d√©p√¥t
      - name: Checkout du code
        uses: actions/checkout@v4

      # 2. Copier tous les fichiers du projet sur le serveur en une seule fois
      - name: Copier les fichiers du projet sur le VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          source: "." # Copie tout le r√©pertoire courant
          target: "/opt/caisse"
          rm: true # Supprime le contenu de /opt/caisse avant la copie

      # 3. Se connecter au VPS pour cr√©er les .env et lancer Docker Compose
      - name: Cr√©er les .env et red√©marrer les services
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            # Se placer dans le r√©pertoire du projet sur le serveur
            cd /opt/caisse

            echo "Cr√©ation du fichier .env pour le backend..."
            cat <<EOF > ./apis/.env
            ${{ secrets.APIS_ENV_TZ }}
            ${{ secrets.APIS_ENV_PORT }}
            ${{ secrets.APIS_ENV_HOST }}
            ${{ secrets.APIS_ENV_LOG_LEVEL }}
            ${{ secrets.APIS_ENV_APP_KEY }}
            ${{ secrets.APIS_ENV_NODE_ENV }}
            ${{ secrets.APIS_ENV_DB_HOST }}
            ${{ secrets.APIS_ENV_DB_PORT }}
            ${{ secrets.APIS_ENV_DB_USER }}
            ${{ secrets.APIS_ENV_DB_PASSWORD }}
            ${{ secrets.APIS_ENV_DB_DATABASE }}
            ${{ secrets.APIS_ENV_SMTP_HOST }}
            ${{ secrets.APIS_ENV_SMTP_PORT }}
            ${{ secrets.APIS_ENV_SMTP_USERNAME }}
            ${{ secrets.APIS_ENV_SMTP_PASSWORD }}
            ${{ secrets.APIS_ENV_CACHE_VIEWS }}
            ${{ secrets.APIS_ENV_VITE_FRONT_URL }}
            EOF

            echo "Cr√©ation du fichier .env.db..."
            cat <<EOF > ./apis/.env.db
            ${{ secrets.POSTGRES_USER }}
            ${{ secrets.POSTGRES_PASSWORD }}
            ${{ secrets.POSTGRES_DB }}
            EOF

            echo "Cr√©ation du fichier .env pour le frontend..."
            cat <<EOF > ./apps/.env
            ${{ secrets.APP_ENV }}
            EOF
            
            echo "Arr√™t des anciens conteneurs..."
            docker-compose down || true
            
            echo "Lancement des nouveaux conteneurs..."
            docker-compose up --build -d
            
            echo "Nettoyage des anciennes images Docker..."
            docker image prune -f
            
            echo "D√©ploiement termin√©. Conteneurs en cours d'ex√©cution :"
            docker ps